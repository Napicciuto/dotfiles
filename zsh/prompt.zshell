autoload colors && colors
autoload spectrum && spectrum

git_branch() {
  echo $(/usr/bin/git symbolic-ref HEAD 2>/dev/null | awk -F/ {'print $NF'})
}

git_dirty() {
  st=$(/usr/bin/git status 2>/dev/null | tail -n 1)
  if [[ $st == "" ]]
  then
    echo ""
  else
    if [[ $st == "nothing to commit (working directory clean)" ]]
    then
      echo "on %{$fg_bold[green]%}$(git_prompt_info)%{$reset_color%}"
    else
      echo "on %{$fg_bold[red]%}$(git_prompt_info)%{$reset_color%}"
    fi
  fi
}



git_prompt_info () {
 ref=$(/usr/bin/git symbolic-ref HEAD 2>/dev/null) || return
# echo "(%{\e[0;33m%}${ref#refs/heads/}%{\e[0m%})"
 echo "${ref#refs/heads/}"
}

unpushed () {
  /usr/bin/git cherry -v origin/$(git_branch) 2>/dev/null
}

need_push () {
  if [[ $(unpushed) == "" ]]
  then
    echo " "
  else
    echo " with %{$fg_bold[magenta]%}unpushed%{$reset_color%} "
  fi
}

parse_git_dirty(){
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit" ]] && echo "*"
}

parse_git_branch(){
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

git_status(){
  echo "%{$FG[254]%}on %{$FG[141]%}$(parse_git_branch)%{$reset_color%}"
}

directory_name(){
  echo "%{$FG[190]%}${PWD/#$HOME/~}%{$reset_color%}"
}

user_and_host(){
  echo "%{$FG[009]%}%n%{$reset_color%}%{$FG[254]%}@%{$reset_color%}%{$FG[172]%}%m%{$reset_color%}"
}

ruby_version(){
  echo "%{$FG[200]%}Ruby `ruby -e 'print RUBY_VERSION'`%{$reset_color%}"
}

gemset_name(){
  echo "%{$FG[123]%}`rvm gemset name`%{$reset_color%}"
}

export PROMPT=$'\n$(user_and_host)%{$FG[254]%} in $(directory_name) $(git_status) %{$FG[254]%}using $(ruby_version)%{$FG[254]%}, gemset $(gemset_name)%{$reset_color%}\n\$ '
